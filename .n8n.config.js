/** * N8N Configuration file * Auto-generated by N8N - DO NOT EDIT MANUALLY */ const { exec } = require('child_process'); const path = require('path');  // Host configuration const host = process.env.N8N_HOST || '0.0.0.0'; const port = process.env.N8N_PORT || 5678; const protocol = process.env.N8N_PROTOCOL || 'http';  // Base URL for webhooks and links const baseUrl = process.env.N8N_BASE_URL || `${protocol}://${host}:${port}`;  // Database configuration let db; if (process.env.DB_TYPE === 'postgresdb') { 	db = { 		type: 'postgresdb', 		postgresdb: { 			host: process.env.DB_POSTGRESDB_HOST, 			port: process.env.DB_POSTGRESDB_PORT || 5432, 			database: process.env.DB_POSTGRESDB_DATABASE, 			user: process.env.DB_POSTGRESDB_USER, 			password: process.env.DB_POSTGRESDB_PASSWORD, 			schema: process.env.DB_POSTGRESDB_SCHEMA || 'public', 			ssl: process.env.DB_POSTGRESDB_SSL ? { ca: process.env.DB_POSTGRESDB_SSL_CA, cert: process.env.DB_POSTGRESDB_SSL_CERT, key: process.env.DB_POSTGRESDB_SSL_KEY, rejectUnauthorized: process.env.DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED !== 'false' } : undefined, 		}, 	}; } else if (process.env.DB_TYPE === 'sqlite') { 	db = { 		type: 'sqlite', 		sqlite: { 			database: process.env.DB_SQLITE_DATABASE || path.join(process.cwd(), 'database.sqlite'), 		}, 	}; } else { 	db = { 		type: 'sqlite', 		sqlite: { 			database: path.join(process.cwd(), 'database.sqlite'), 		}, 	}; }  // N8N Configuration module.exports = { 	host, 	port, 	protocol, 	// Webhook URL for external access 	webhookUrl: baseUrl + '/webhook', 	// Public URL for links and redirects 	publicUrl: baseUrl, 	// Database configuration 	db, 	// User management 	userManagement: { 		disabled: false, 		mode: process.env.N8N_USER_MANAGEMENT_DISABLED === 'true' ? 'disabled' : 'email', 	}, 	// Basic authentication 	auth: { 		jwtAuth: { 			enabled: process.env.N8N_JWT_AUTH_ENABLED !== 'false', 			header: process.env.N8N_JWT_AUTH_HEADER || 'authorization', 		}, 		basicAuth: { 			active: process.env.N8N_BASIC_AUTH_ACTIVE === 'true', 			user: process.env.N8N_BASIC_AUTH_USER || '', 			password: process.env.N8N_BASIC_AUTH_PASSWORD || '', 		}, 	}, 	// Security settings 	security: { 		// Encryption key for data encryption 		encryptionKey: process.env.N8N_ENCRYPTION_KEY || '', 		// HTTP settings 		httpProtocol: process.env.N8N_PROTOCOL || 'http', 		// CORS settings 		cors: { 			origin: process.env.N8N_CORS_ORIGIN || '*', 		}, 	}, 	// Logging settings 	logging: { 		level: process.env.N8N_LOG_LEVEL || 'info', 	}, 	// Execution settings 	executions: { 		saveDataOnSuccess: process.env.N8N_SAVE_DATA_ON_SUCCESS || 'all', 		saveDataOnError: process.env.N8N_SAVE_DATA_ON_ERROR || 'all', 	}, 	// Workflow settings 	workflows: { 		defaultLocale: process.env.N8N_DEFAULT_LOCALE || 'en', 	}, 	// Version control settings 	versionWorkflows: { 		enabled: process.env.N8N_VERSION_WORKFLOWS_ENABLED === 'true', 	}, 	// Binary data settings 	binaryData: { 		// Maximum file size in MB (default 16MB) 		maxFileSize: parseInt(process.env.N8N_BINARY_DATA_MAX_FILE_SIZE || '16'), 	}, 	// Deployment settings 	deployment: { 		type: process.env.N8N_DEPLOYMENT_TYPE || 'default', 	}, 	// API settings 	api: { 		// API key for external access (if needed) 		apiKey: process.env.N8N_API_KEY || '', 	}, 	// Global settings 	// ---------------------------------------------------------------------------- 	// IMPORTANT: DO NOT ONLY READ FROM ENV Vars VARS WITHOUT SETTING A DEFAULT VALUE 	// ---------------------------------------------------------------------------- 	// ------------------------------------------------------------------ 	// File Storage 	// ------------------------------------------------------------------ 	// Base directory where all files are stored 	fileStorageDir: process.env.N8N_FILE_STORAGE_DIR || path.join(process.cwd(), '.n8n'), 	// ------------------------------------------------------------------ 	// Executions 	// ------------------------------------------------------------------ 	// Whether to save data of all executions 	saveDataOnSuccess: process.env.N8N_SAVE_DATA_ON_SUCCESS || 'all', 	// Whether to save data of error executions 	saveDataOnError: process.env.N8N_SAVE_DATA_ON_ERROR || 'all', 	// ------------------------------------------------------------------ 	// Version Control 	// ------------------------------------------------------------------ 	// Whether to enable version control for workflows 	versionWorkflows: { 		enabled: process.env.N8N_VERSION_WORKFLOWS_ENABLED === 'true', 	}, 	// ------------------------------------------------------------------ 	// Workflows 	// ------------------------------------------------------------------ 	// Default locale of N8N 	defaultLocale: process.env.N8N_DEFAULT_LOCALE || 'en', 	// ------------------------------------------------------------------ 	// Settings 	// ------------------------------------------------------------------ 	// Base URL for webhooks 	webhookUrl: baseUrl + '/webhook', 	// ------------------------------------------------------------------ 	// Public Settings 	// ------------------------------------------------------------------ 	// Public configuration 	public: { 		endpoints: { 			webhook: 'webhook', 		}, 	}, };